Automated Teller Machine (ATM)

Requirements
1. The user should be able to swipe a card.
2. The user should be able to withdraw funds from account of any bank.
3. The user should be be able to deposit cash and check.
4. The user should be able to check their balance.

class ATM {
   Integer atmId;
   Address location;

   CashDispenser cashDispenser;
   Screen screen;
   CardReader cardReader;
   Keypad keypad;
   CashDeposit cashDeposit;
   ChequeDeposit chequeDeposit;

   BankService bankService;
}

class Address {
  Integer pinCode;
  String street;
  String city;
  String state;
  String country;
}

class CashDispenser {
   Map<CashType, List<Cash>>cashAvailable;
   public void dispenseCash(Integer amount);
}

public enum CashType {
 FIFTY, ONE_HUNDRED, TWO_HUNDRED, FIVE_HUNDRED, THOUSAND
}

public Cash {
   CashType cashType;
   String serialNumber;
}

class Screen {
   public void display(String message);
}

class CardReader {
   public CardInfo fetchCardDetails();
}
class CardInfo {
   CardType cardType;
   Bank bank;
   String cardNumber;
   Date expiryDate;
   Integer cvv;
   Double withdrawLimit;
}
enum CardType {
   DEBIT, CREDIT
}
class KeyPad {
   public String getInput();
}

Bank {
    String name;
    Address location;
    List<ATM>atmList;
}

interface BankService{
   public Boolean isValidUser(String pin, CardInfo cardInfo);
   public Customer getCustomerDetails(CardInfo cardInfo);
   public TransactionDetail executeTransaction(Transaction transactionInfo, Customer customerInfo);
}

class BankA  implements BankService{
       @Override
       public Boolean isValidUser(String pin, CardInfo cardInfo);

       @Override
       public Customer getCustomerDetails(CardInfo cardInfo);

       @Override
       public TransactionDetail executeTransaction(Transaction transactionInfo, Customer customerInfo);
}

class BankB  implements BankService{
       @Override
       public Boolean isValidUser(String pin, CardInfo cardInfo);

       @Override
       public Customer getCustomerDetails(CardInfo cardInfo);

       @Override
       public TransactionDetail executeTransaction(Transaction transactionInfo, Customer customerInfo);
}

class BankServiceFactory {
   //Will return BankA /BankB object
   public BankService getBankServiceObject(CardInfo cardInfo);
}

class Customer{
   String firstName;
   String lastName;
   CardInfo cardInfo;
   Account account;

   BankService bankServiceObj
   CustomerStatus customerStatus;
}

class Account {
  String accountNumber;
  Float availableBalance;
}
public enum CustomerStatus{
  BLOCKED, ACTIVE, CLOSED;
}

class Transaction {
    Integer transactionId;
    String sourceAccount;
    Date transactionDate;
}

class Deposit extends Transaction {
  Float amount;
}

class ChequeDeposit extends Deposit {
   public Cheque getCheque();
}

class CashDeposit {
    public List<Cash>getCash();
}

class Withdraw extends Transaction {
   float amount;
}

class Transfer extends Transaction {
   String destinationAccount;
   Float amount;
}

class TransactionDetail {
   TransactionStatus status;
   String accountNumber;
   Date tranDate;
   TransactionType tranType;
   Integer tranId;
}

public enum  TransactionStatus {
   PENDING, CANCELLED, SUCCESS, ERROR;
}

public enum TransactionType {
   WITHDRAW,  DEPOSIT, TRANSFER;
}